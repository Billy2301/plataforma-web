// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using Entity.ClinicaModels;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;

namespace DA.ClinicaContext
{
    public partial class CPALClinicaContext
    {
        private ICPALClinicaContextProcedures _procedures;

        public virtual ICPALClinicaContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new CPALClinicaContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ICPALClinicaContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<upAgendaDiagnosticoV2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<upCalendarioDisponibleDiagV2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<upHistorialPacienteGetDiagV2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<upHistorialPacienteGetTratV2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<upCitasProximasPorUsuarioResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<upHistoriaClinicaGetDiagnosticoV2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<upHistoriaClinicaGetTratamientoPUResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<upCalendarioDisponibleDiagV3PortalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<upCalendarioDisponibleDiagPresencialResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<upCalendarioDisponibleDiagVirtualResult>().HasNoKey().ToView(null);
        }
    }

    public partial class CPALClinicaContextProcedures : ICPALClinicaContextProcedures
    {
        private readonly CPALClinicaContext _context;

        public CPALClinicaContextProcedures(CPALClinicaContext context)
        {
            _context = context;
        }

        public virtual async Task<List<upAgendaDiagnosticoV2Result>> upAgendaDiagnosticoV2Async(int? personalID, DateTime? dateFrom, DateTime? dateTo, int? sedeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "personalID",
                    Value = personalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dateFrom",
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dateTo",
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sedeID",
                    Value = sedeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<upAgendaDiagnosticoV2Result>("EXEC @returnValue = [dbo].[upAgendaDiagnosticoV2] @personalID, @dateFrom, @dateTo, @sedeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<upCalendarioDisponibleDiagV2Result>> upCalendarioDisponibleDiagV2Async(DateTime? dateInicio, int? especialidadID, int? rangoEdadID, int? personalID, int? sedeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "dateInicio",
                    Value = dateInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "especialidadID",
                    Value = especialidadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rangoEdadID",
                    Value = rangoEdadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "personalID",
                    Value = personalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sedeID",
                    Value = sedeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<upCalendarioDisponibleDiagV2Result>("EXEC @returnValue = [dbo].[upCalendarioDisponibleDiagV2] @dateInicio, @especialidadID, @rangoEdadID, @personalID, @sedeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
        
        public virtual async Task<List<upHistorialPacienteGetDiagV2Result>> upHistorialPacienteGetDiagV2Async(int? numeroHistoriaClinica, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "numeroHistoriaClinica",
                    Value = numeroHistoriaClinica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<upHistorialPacienteGetDiagV2Result>("EXEC @returnValue = [dbo].[upHistorialPacienteGetDiagV2] @numeroHistoriaClinica", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<upHistorialPacienteGetTratV2Result>> upHistorialPacienteGetTratV2Async(int? numeroHistoriaClinica, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "numeroHistoriaClinica",
                    Value = numeroHistoriaClinica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<upHistorialPacienteGetTratV2Result>("EXEC @returnValue = [dbo].[upHistorialPacienteGetTratV2] @numeroHistoriaClinica", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<upCitasProximasPorUsuarioResult>> upCitasProximasPorUsuarioAsync(string userName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 100,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<upCitasProximasPorUsuarioResult>("EXEC @returnValue = [dbo].[upCitasProximasPorUsuario] @userName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<upHistoriaClinicaGetDiagnosticoV2Result>> upHistoriaClinicaGetDiagnosticoV2Async(int? numeroHistoriaClinica, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "numeroHistoriaClinica",
                    Value = numeroHistoriaClinica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<upHistoriaClinicaGetDiagnosticoV2Result>("EXEC @returnValue = [dbo].[upHistoriaClinicaGetDiagnosticoV2] @numeroHistoriaClinica", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<upHistoriaClinicaGetTratamientoPUResult>> upHistoriaClinicaGetTratamientoPUAsync(int? numeroHistoriaClinica, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "numeroHistoriaClinica",
                    Value = numeroHistoriaClinica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<upHistoriaClinicaGetTratamientoPUResult>("EXEC @returnValue = [dbo].[upHistoriaClinicaGetTratamientoPU] @numeroHistoriaClinica", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }


        public virtual async Task<List<upCalendarioDisponibleDiagV3PortalResult>> upCalendarioDisponibleDiagV3PortalAsync(DateTime? fechaSeleccionada, int? especialidadID, int? rangoEdadID, int? personalID, int? sedeID, int? Dias, int? tipo, int? tiempo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "fechaSeleccionada",
                    Value = fechaSeleccionada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "especialidadID",
                    Value = especialidadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rangoEdadID",
                    Value = rangoEdadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "personalID",
                    Value = personalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sedeID",
                    Value = sedeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Dias",
                    Value = Dias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tipo",
                    Value = tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tiempo",
                    Value = tiempo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<upCalendarioDisponibleDiagV3PortalResult>("EXEC @returnValue = [dbo].[upCalendarioDisponibleDiagV3Portal] @fechaSeleccionada, @especialidadID, @rangoEdadID, @personalID, @sedeID, @Dias, @tipo, @tiempo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<upCalendarioDisponibleDiagPresencialResult>> upCalendarioDisponibleDiagPresencialAsync(int? evaluacionID, int? rangoEdadID, int? personalID, int? sedeID, int? Dias, int? tiempo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "evaluacionID",
                    Value = evaluacionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rangoEdadID",
                    Value = rangoEdadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "personalID",
                    Value = personalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sedeID",
                    Value = sedeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Dias",
                    Value = Dias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tiempo",
                    Value = tiempo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            _context.Database.SetCommandTimeout(120); // eliminar si da problemas (prueba para intentar aumentar el tiempo de espera) !
            var _ = await _context.SqlQueryAsync<upCalendarioDisponibleDiagPresencialResult>("EXEC @returnValue = [dbo].[upCalendarioDisponibleDiagPresencial] @evaluacionID, @rangoEdadID, @personalID, @sedeID, @Dias, @tiempo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<upCalendarioDisponibleDiagVirtualResult>> upCalendarioDisponibleDiagVirtualAsync(int? evaluacionID, int? rangoEdadID, int? personalID, int? sedeID, int? Dias, int? tiempo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "evaluacionID",
                    Value = evaluacionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rangoEdadID",
                    Value = rangoEdadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "personalID",
                    Value = personalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sedeID",
                    Value = sedeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Dias",
                    Value = Dias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tiempo",
                    Value = tiempo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            _context.Database.SetCommandTimeout(120); // eliminar si da problemas (prueba para intentar aumentar el tiempo de espera) !
            var _ = await _context.SqlQueryAsync<upCalendarioDisponibleDiagVirtualResult>("EXEC @returnValue = [dbo].[upCalendarioDisponibleDiagVirtual] @evaluacionID, @rangoEdadID, @personalID, @sedeID, @Dias, @tiempo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
